#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
from pathlib import Path
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import logging

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

def create_test_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = 800, 600
    image = Image.new('RGB', (width, height), color='white')
    draw = ImageDraw.Draw(image)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("arial.ttf", 16)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.load_default()
    
    error_text = [
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        "",
        "–ö–æ–¥ –æ—à–∏–±–∫–∏: SQL-001",
        "–û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î",
        "",
        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:",
        "- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        "- –°–µ—Ä–≤–µ—Ä –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    ]
    
    y_position = 50
    for line in error_text:
        draw.text((50, y_position), line, fill='black', font=font)
        y_position += 30
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏
    draw.rectangle([(30, 30), (width-30, height-30)], outline='red', width=2)
    
    return image

def test_ocr_module():
    """–¢–µ—Å—Ç OCR –º–æ–¥—É–ª—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –º–æ–¥—É–ª—è...")
    
    try:
        from ocr.image_preprocessor import ImagePreprocessor
        from ocr.text_extractor import TextExtractor
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = create_test_image()
        test_image.save("test_error.png")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_error.png")
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        preprocessor = ImagePreprocessor()
        processed_image = preprocessor.preprocess_image(np.array(test_image))
        print("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        extractor = TextExtractor()
        ocr_results = extractor.extract_text(processed_image)
        
        if ocr_results:
            best_result = extractor.select_best_result(ocr_results)
            print(f"‚úÖ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {best_result.engine}")
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {best_result.text[:100]}...")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_result.confidence:.1f}%")
        else:
            print("‚ùå OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR: {e}")

def test_ai_classifier():
    """–¢–µ—Å—Ç AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    
    try:
        from ai.error_classifier import ErrorClassifier
        
        classifier = ErrorClassifier(llm_provider="groq")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_error = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQL-001"
        test_info = {"application": "1c", "error_code": "SQL-001"}
        
        classification = classifier.classify_error(test_error, test_info)
        
        print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   - –¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {classification.application_type}")
        print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {classification.error_category}")
        print(f"   - –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {classification.severity}")
        print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {classification.confidence:.1f}%")
        print(f"   - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {classification.keywords}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI: {e}")

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database.knowledge_base import KnowledgeBase, Solution
        from datetime import datetime
        
        kb = KnowledgeBase()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        test_solution = Solution(
            id=None,
            error_text="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ SQL-001",
            solution_text="–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
            application_type="1c",
            error_category="sql",
            source="Test",
            success_rate=90.0,
            created_at=datetime.now().isoformat(),
            tags=["—Ç–µ—Å—Ç", "sql", "1—Å"],
            steps=["–®–∞–≥ 1", "–®–∞–≥ 2", "–®–∞–≥ 3"]
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if kb.add_solution(test_solution):
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è")
        
        # –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π
        solutions = kb.search_solutions("SQL-001", "1c", limit=3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(solutions)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = kb.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_solutions', 0)} —Ä–µ—à–µ–Ω–∏–π –≤ –±–∞–∑–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")

def test_web_search():
    """–¢–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞...")
    
    try:
        from search.web_search import WebSearch
        
        web_search = WebSearch()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        results = web_search.search_solutions("SQL –æ—à–∏–±–∫–∞ 1–°", "1c", max_results=3)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        for i, result in enumerate(results, 1):
            print(f"   {i}. {result['title']}")
            print(f"      URL: {result['url']}")
            print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance']:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")

def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        from ocr.image_preprocessor import ImagePreprocessor
        from ocr.text_extractor import TextExtractor
        from ai.error_classifier import ErrorClassifier
        from database.knowledge_base import KnowledgeBase
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        preprocessor = ImagePreprocessor()
        extractor = TextExtractor()
        classifier = ErrorClassifier(llm_provider="groq")
        kb = KnowledgeBase()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = create_test_image()
        image_array = np.array(test_image)
        
        # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_image = preprocessor.preprocess_image(image_array)
        print("‚úÖ –®–∞–≥ 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # 2. OCR
        ocr_results = extractor.extract_text(processed_image)
        if not ocr_results:
            print("‚ùå OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return
            
        best_result = extractor.select_best_result(ocr_results)
        cleaned_text = extractor.clean_text(best_result.text)
        print(f"‚úÖ –®–∞–≥ 2: OCR –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        error_info = extractor.extract_structured_error_info(cleaned_text)
        print(f"‚úÖ –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {error_info}")
        
        # 4. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        classification = classifier.classify_error(cleaned_text, error_info)
        print(f"‚úÖ –®–∞–≥ 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification.application_type} - {classification.error_category}")
        
        # 5. –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π
        solutions = kb.search_solutions(cleaned_text, classification.application_type, limit=3)
        print(f"‚úÖ –®–∞–≥ 5: –ù–∞–π–¥–µ–Ω–æ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π")
        
        print("\nüéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_ocr_module()
    test_ai_classifier()
    test_database()
    test_web_search()
    test_full_pipeline()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("python run.py")

if __name__ == "__main__":
    main() 