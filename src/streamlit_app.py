"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—à–∏–±–æ–∫
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import io
import logging
from datetime import datetime
import os

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from ocr.image_preprocessor import ImagePreprocessor
from ocr.text_extractor import TextExtractor
from ai.error_classifier import ErrorClassifier
from database.knowledge_base import KnowledgeBase, Solution

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    preprocessor = ImagePreprocessor()
    extractor = TextExtractor()
    classifier = ErrorClassifier(llm_provider="groq")  # –∏–ª–∏ "ollama"
    knowledge_base = KnowledgeBase()
    return preprocessor, extractor, classifier, knowledge_base

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(
        page_title="–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ—à–∏–±–æ–∫",
        page_icon="üîç",
        layout="wide"
    )
    
    st.title("üîç –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—à–∏–±–æ–∫")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ—à–µ–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    preprocessor, extractor, classifier, knowledge_base = init_components()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        llm_provider = st.selectbox(
            "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
            ["groq", "ollama", "openai"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        use_multiple_engines = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ OCR –¥–≤–∏–∂–∫–æ–≤",
            value=True,
            help="–£–ª—É—á—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            show_statistics(knowledge_base)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π",
            type=['png', 'jpg', 'jpeg', 'bmp'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, BMP"
        )
        
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ numpy array
            image_array = np.array(image)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É"):
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    process_error_screenshot(
                        image_array, preprocessor, extractor, 
                        classifier, knowledge_base, use_multiple_engines
                    )
    
    with col2:
        st.header("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'analysis_results' in st.session_state:
            display_results(st.session_state.analysis_results)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
        if 'solutions' in st.session_state:
            display_solutions(st.session_state.solutions, knowledge_base)

def process_error_screenshot(image_array, preprocessor, extractor, classifier, knowledge_base, use_multiple_engines):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—à–∏–±–∫–∏"""
    try:
        # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.info("üîÑ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        processed_image = preprocessor.preprocess_image(image_array)
        
        # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        st.info("üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        ocr_results = extractor.extract_text(processed_image, use_multiple_engines)
        
        if not ocr_results:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        best_result = extractor.select_best_result(ocr_results)
        if not best_result:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR")
            return
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned_text = extractor.clean_text(best_result.text)
        
        # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        error_info = extractor.extract_structured_error_info(cleaned_text)
        
        # 4. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        st.info("ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏...")
        classification = classifier.classify_error(cleaned_text, error_info)
        
        # 5. –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π
        st.info("üîç –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π...")
        solutions = knowledge_base.search_solutions(
            cleaned_text, 
            classification.application_type,
            limit=5
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session state
        st.session_state.analysis_results = {
            'ocr_result': best_result,
            'cleaned_text': cleaned_text,
            'error_info': error_info,
            'classification': classification
        }
        st.session_state.solutions = solutions
        
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

def display_results(results):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with st.expander("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", expanded=True):
        st.text_area(
            "–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:",
            results['cleaned_text'],
            height=150,
            help="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR", f"{results['ocr_result'].confidence:.1f}%")
        with col2:
            st.metric("–î–≤–∏–∂–æ–∫ OCR", results['ocr_result'].engine)
        with col3:
            st.metric("–Ø–∑—ã–∫", results['ocr_result'].language)
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        error_info = results['error_info']
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ö–æ–¥ –æ—à–∏–±–∫–∏:**", error_info.get('error_code', '–ù–µ –Ω–∞–π–¥–µ–Ω'))
            st.write("**–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**", error_info.get('application', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'))
        
        with col2:
            st.write("**–°–æ–æ–±—â–µ–Ω–∏–µ:**", error_info.get('error_message', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'))
            st.write("**–í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞:**", error_info.get('timestamp', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'))
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    with st.expander("ü§ñ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"):
        classification = results['classification']
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", classification.application_type.upper())
        with col2:
            st.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", classification.error_category.upper())
        with col3:
            st.metric("–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å", classification.severity.upper())
        
        st.write("**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**", ", ".join(classification.keywords))
        st.write("**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:**", f"{classification.confidence:.1f}%")
        
        if classification.suggested_actions:
            st.write("**–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
            for i, action in enumerate(classification.suggested_actions, 1):
                st.write(f"{i}. {action}")

def display_solutions(solutions, knowledge_base):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    st.subheader("üí° –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
    
    if not solutions:
        st.warning("‚ö†Ô∏è –†–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"):
            add_solution_form(knowledge_base)
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
    for i, solution in enumerate(solutions, 1):
        with st.expander(f"–†–µ—à–µ–Ω–∏–µ #{i}: {solution.error_category}", expanded=i==1):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write("**–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:**")
                st.write(solution.solution_text)
                
                if solution.steps:
                    st.write("**–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**")
                    for j, step in enumerate(solution.steps, 1):
                        st.write(f"{j}. {step}")
                
                if solution.tags:
                    st.write("**–¢–µ–≥–∏:**", ", ".join(solution.tags))
            
            with col2:
                st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫", solution.source)
                if solution.success_rate:
                    st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{solution.success_rate:.1f}%")
                st.metric("–î–∞—Ç–∞", solution.created_at[:10])
                
                # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                if st.button(f"üëç –ü–æ–º–æ–≥–ª–æ", key=f"helpful_{i}"):
                    update_success_rate(solution.id, solution.success_rate + 10, knowledge_base)
                    st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                
                if st.button(f"üëé –ù–µ –ø–æ–º–æ–≥–ª–æ", key=f"not_helpful_{i}"):
                    update_success_rate(solution.id, max(0, solution.success_rate - 10), knowledge_base)
                    st.error("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")

def add_solution_form(knowledge_base):
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    with st.form("add_solution"):
        st.write("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
        error_text = st.text_area("–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏", value=st.session_state.get('cleaned_text', ''))
        solution_text = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
        application_type = st.selectbox("–¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", ["1c", "windows", "office", "browser", "other"])
        error_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—à–∏–±–∫–∏", ["sql", "config", "rights", "system", "connection", "other"])
        source = st.text_input("–ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—à–µ–Ω–∏—è", value="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        success_rate = st.slider("–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏", 0, 100, 50)
        
        steps = st.text_area("–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–∫–∞–∂–¥—ã–π —à–∞–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        tags = st.text_input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        
        if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"):
            if error_text and solution_text:
                solution = Solution(
                    id=None,
                    error_text=error_text,
                    solution_text=solution_text,
                    application_type=application_type,
                    error_category=error_category,
                    source=source,
                    success_rate=success_rate,
                    created_at=datetime.now().isoformat(),
                    tags=[tag.strip() for tag in tags.split(",") if tag.strip()],
                    steps=[step.strip() for step in steps.split("\n") if step.strip()]
                )
                
                if knowledge_base.add_solution(solution):
                    st.success("‚úÖ –†–µ—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def update_success_rate(solution_id, new_rate, knowledge_base):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"""
    try:
        knowledge_base.update_success_rate(solution_id, new_rate)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

def show_statistics(knowledge_base):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    stats = knowledge_base.get_statistics()
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π", stats.get('total_solutions', 0))
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{stats.get('avg_success_rate', 0):.1f}%")
    with col3:
        st.metric("–¢–∏–ø—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", len(stats.get('application_stats', {})))
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    with st.expander("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        if stats.get('application_stats'):
            st.write("**–ü–æ —Ç–∏–ø–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:**")
            for app, count in stats['application_stats'].items():
                st.write(f"- {app}: {count}")
        
        if stats.get('category_stats'):
            st.write("**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—à–∏–±–æ–∫:**")
            for category, count in stats['category_stats'].items():
                st.write(f"- {category}: {count}")

if __name__ == "__main__":
    main() 